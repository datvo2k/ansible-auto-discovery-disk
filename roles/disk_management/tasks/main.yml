---
- name: Include disk discovery role
  include_role:
    name: disk_discovery
  tags: discovery

- name: Fail if no disks discovered
  fail:
    msg: "No available disks found for management"
  when: discovered_disks | length == 0
  tags: validation

- name: Create partition table on discovered disks
  parted:
    device: "/dev/{{ item }}"
    label: "{{ disk_config.partition_table }}"
    state: present
  loop: "{{ discovered_disks }}"
  register: partition_table_created
  tags:
    - partitioning
    - disk_management

- name: Create primary partition spanning entire disk
  parted:
    device: "/dev/{{ item }}"
    number: 1
    state: present
    part_start: "0%"
    part_end: "100%"
    align: "{{ disk_config.alignment }}"
  loop: "{{ discovered_disks }}"
  register: partitions_created
  tags:
    - partitioning
    - disk_management

- name: Wait for partition device files
  wait_for:
    path: "/dev/{{ item }}1"
    timeout: 30
    state: present
  loop: "{{ discovered_disks }}"
  tags:
    - partitioning
    - disk_management

- name: Create filesystems on new partitions
  filesystem:
    fstype: "{{ group_disk_config.filesystem | default(disk_config.filesystem) }}"
    dev: "/dev/{{ item }}1"
    opts: "{{ disk_config.filesystem_options[group_disk_config.filesystem | default(disk_config.filesystem)] | default('') }}"
  loop: "{{ discovered_disks }}"
  register: filesystems_created
  tags:
    - formatting
    - disk_management

- name: Generate mount points
  set_fact:
    mount_points: >-
      {{
        discovered_disks |
        map('regex_replace', '^(.*)$', mount_base_path + '/disk\1') |
        list
      }}
  vars:
    mount_base_path: "{{ group_disk_config.mount_prefix | default(disk_config.mount_base) }}"
  tags: disk_management

- name: Create mount point directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ disk_config.default_owner }}"
    group: "{{ disk_config.default_group }}"
    mode: "{{ disk_config.default_mode }}"
  loop: "{{ mount_points }}"
  tags:
    - mounting
    - disk_management

- name: Get UUIDs of new filesystems
  command: "blkid -s UUID -o value /dev/{{ item }}1"
  register: filesystem_uuids
  loop: "{{ discovered_disks }}"
  changed_when: false
  tags:
    - mounting
    - disk_management

- name: Mount new filesystems
  mount:
    path: "{{ mount_points[item_index] }}"
    src: "/dev/{{ item }}1"
    fstype: "{{ group_disk_config.filesystem | default(disk_config.filesystem) }}"
    opts: "{{ group_disk_config.mount_options | default(disk_config.mount_options) }}"
    state: mounted
  loop: "{{ discovered_disks }}"
  loop_control:
    index_var: item_index
  tags:
    - mounting
    - disk_management

- name: Add persistent fstab entries
  mount:
    path: "{{ mount_points[item_index] }}"
    src: "UUID={{ filesystem_uuids.results[item_index].stdout }}"
    fstype: "{{ group_disk_config.filesystem | default(disk_config.filesystem) }}"
    opts: "{{ group_disk_config.mount_options | default(disk_config.mount_options) }}"
    dump: 0
    passno: 2
    state: present
  loop: "{{ discovered_disks }}"
  loop_control:
    index_var: item_index
  when: disk_config.create_fstab_entries | default(true)
  tags:
    - mounting
    - disk_management
    - fstab

- name: Set final ownership and permissions
  file:
    path: "{{ item }}"
    owner: "{{ group_disk_config.owner | default(disk_config.default_owner) }}"
    group: "{{ group_disk_config.group | default(disk_config.default_group) }}"
    mode: "{{ group_disk_config.mode | default(disk_config.default_mode) }}"
    recurse: false
  loop: "{{ mount_points }}"
  tags:
    - permissions
    - disk_management

- name: Generate disk management report
  template:
    src: disk_report.j2
    dest: "/tmp/disk_report_{{ inventory_hostname }}_{{ ansible_date_time.epoch }}.txt"
    mode: '0644'
  tags:
    - reporting
    - disk_management